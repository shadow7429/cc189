// pg 203

void rotate(int[][] matrix, int n){
	for (int layer = 0; layer < n / 2; layer++){
		int first = layer;
		int last = n - 1 - layer;
		for (int i = first; i < last; i++){
			int offset = i - first;
			//save top
			int top = matrix[first][i];
			//left -> top
			matrix[first][i] = matrix[last - offset][first];
			//bottom -> left
			matrix[last - offset][first] = matrix[last][last - offset];
			//right -> bottom
			matrix[last][last - offset] = matrix[i][last];
			//top -> right
			matrix[i][last] = top;
		} 
  } 
}
 
/*
这种问题的最好的时间复杂度也得是O(n^2)了，因为任何方法都得碰触到每一个项。
这种问题一般都是一层层的来，然后要注意层数的最大值是n/2。
*/
